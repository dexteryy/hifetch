
# https://www.npmjs.com/package/babel-eslint
parser: "babel-eslint"

plugins:
  - react
  - flow-vars
# - babel # TODO

# http://eslint.org/blog/2016/02/eslint-v2.0.0-released
parserOptions:
  ecmaVersion: 6
  ecmaFeatures:
    jsx: true
  sourceType: "module"

env:
  browser:                          true # browser global variables.
  node:                             true # Node.js global variables and Node.js scoping.
  # "commonjs:                        true # CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
  worker:                           true # web workers global variables.
  # "amd:                             true # defines require() and define() as global variables as per the amd spec.
  mocha:                            true # adds all of the Mocha testing global variables.
  # "jasmine:                         true # adds all of the Jasmine testing global variables for version 1.3 and 2.0.
  phantomjs:                        true # PhantomJS global variables.
  # "jquery:                          true # jQuery global variables.
  # "shelljs:                         false # ShellJS global variables.
  # "mongo:                           false # MongoDB global variables.
  # "applescript:                     false # AppleScript global variables.
  # "nashorn:                         false # Java 8 Nashorn global variables.
  serviceworker:                    true # Service Worker global variables.
  # "webextensions:                   false # WebExtensions globals.
  es6:                              true # enable all ECMAScript 6 features except for modules.

globals:
  Class:                            true
  Generator:                        true
  logger:                           true

rules:
  # 2.0.0
  # http://eslint.org/blog/2016/02/eslint-v2.0.0-released
  # Enforce spacing before and after keywords
  # http://eslint.org/docs/rules/keyword-spacing
  keyword-spacing:                    2 # [2, { "before: true, "after: true, "overrides: null }]
  # Disallow arrow functions where they could be confused with comparisons
  # http://eslint.org/docs/rules/no-confusing-arrow
  no-confusing-arrow:                 2
  # Enforces return statements in callbacks of array's methods
  # http://eslint.org/docs/rules/array-callback-return
  array-callback-return:              2
  # Blacklist certain identifiers to prevent them being used
  # http://eslint.org/docs/rules/id-blacklist
  id-blacklist:                       0
  # Newline Per Chained Method Call
  # http://eslint.org/docs/rules/newline-per-chained-call
  newline-per-chained-call:           0
  # Disallow empty functions
  # http://eslint.org/docs/rules/no-empty-function
  # TODO:  node.body.body.length === 0 TypeError: Cannot read property 'length' of undefined
  # no-empty-function:                  2
  # Disallow Unnecessary Labels
  # http://eslint.org/docs/rules/no-extra-label
  no-extra-label:                     0
  # Disallow var and Named Functions in Global Scope
  # http://eslint.org/docs/rules/no-implicit-globals
  no-implicit-globals:                2
  # Disallow specific imports
  # http://eslint.org/docs/rules/no-restricted-imports
  no-restricted-imports:              0
  # Disallow Self Assignment
  # http://eslint.org/docs/rules/no-self-assign
  no-self-assign:                     2
  # Disallow Symbol Constructor
  # http://eslint.org/docs/rules/no-new-symbol
  no-new-symbol:                      2
  # Disallow unmodified conditions of loops
  # http://eslint.org/docs/rules/no-unmodified-loop-condition
  no-unmodified-loop-condition:       2
  # Disallow Unused Labels
  # http://eslint.org/docs/rules/no-unused-labels
  no-unused-labels:                   0
  # Disallow unnecessary constructor
  # http://eslint.org/docs/rules/no-useless-constructor
  no-useless-constructor:             2
  # Disallow whitespace before properties
  # http://eslint.org/docs/rules/no-whitespace-before-property
  no-whitespace-before-property:      2
  # Require or disallow an newline around variable declarations
  # http://eslint.org/docs/rules/one-var-declaration-per-line
  one-var-declaration-per-line:       [2, "initializations"]
  # Enforce Usage of Spacing in Template Strings
  # http://eslint.org/docs/rules/template-curly-spacing
  template-curly-spacing:             2
  # Suggest using the rest parameters instead of arguments
  # http://eslint.org/docs/rules/prefer-rest-params
  # NOTE: node v5
  prefer-rest-params:                 2
  # Import Sorting
  # http://eslint.org/docs/rules/sort-imports
  sort-imports:                       0
  # Enforce spacing around the * in yield* expressions
  # http://eslint.org/docs/rules/yield-star-spacing
  yield-star-spacing:                 [2, { "before": false, "after": true }]
  # Possible Errors
  # The following rules point out areas where you might have made mistakes.

  # disallow or enforce trailing commas (recommended)
  # http://eslint.org/docs/rules/comma-dangle
  comma-dangle:                       [2, "always-multiline"]
  # disallow assignment in conditional expressions (recommended)
  # http://eslint.org/docs/rules/no-cond-assign
  no-cond-assign:                     2
  # disallow use of console in the node environment (recommended)
  # http://eslint.org/docs/rules/no-console
  no-console:                         0
  # disallow use of constant expressions in conditions (recommended)
  # http://eslint.org/docs/rules/no-constant-condition
  no-constant-condition:              2
  # disallow control characters in regular expressions (recommended)
  # http://eslint.org/docs/rules/no-control-regex
  no-control-regex:                   2
  # disallow use of debugger (recommended)
  # http://eslint.org/docs/rules/no-debugger
  no-debugger:                        2
  # disallow duplicate arguments in functions (recommended)
  # http://eslint.org/docs/rules/no-dupe-args
  no-dupe-args:                       2
  # disallow duplicate keys when creating object literals (recommended)
  # http://eslint.org/docs/rules/no-dupe-keys
  no-dupe-keys:                       2
  # disallow a duplicate case label. (recommended)
  # http://eslint.org/docs/rules/no-duplicate-case
  no-duplicate-case:                  2
  # disallow the use of empty character classes in regular expressions (recommended)
  # http://eslint.org/docs/rules/no-empty-character-class
  no-empty-character-class:           2
  # disallow empty statements (recommended)
  # http://eslint.org/docs/rules/no-empty
  no-empty:                           2
  # disallow assigning to the exception in a catch block (recommended)
  # http://eslint.org/docs/rules/no-ex-assign
  no-ex-assign:                       2
  # disallow double-negation boolean casts in a boolean context (recommended)
  # http://eslint.org/docs/rules/no-extra-boolean-cast
  no-extra-boolean-cast:              2
  # disallow unnecessary parentheses
  # http://eslint.org/docs/rules/no-extra-parens
  no-extra-parens:                    [2, "functions"]
  # disallow unnecessary semicolons (recommended) (fixable)
  # http://eslint.org/docs/rules/no-extra-semi
  no-extra-semi:                      2
  # disallow overwriting functions written as function declarations (recommended)
  # http://eslint.org/docs/rules/no-func-assign
  no-func-assign:                     2
  # disallow function or variable declarations in nested blocks (recommended)
  # http://eslint.org/docs/rules/no-inner-declarations
  no-inner-declarations:              [2, "both"]
  # disallow invalid regular expression strings in the RegExp constructor (recommended)
  # http://eslint.org/docs/rules/no-invalid-regexp
  no-invalid-regexp:                  2
  # disallow irregular whitespace outside of strings and comments (recommended)
  # http://eslint.org/docs/rules/no-irregular-whitespace
  no-irregular-whitespace:            2
  # disallow negation of the left operand of an in expression (recommended)
  # http://eslint.org/docs/rules/no-negated-in-lhs
  no-negated-in-lhs:                  2
  # disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
  # http://eslint.org/docs/rules/no-obj-calls
  no-obj-calls:                       2
  # disallow multiple spaces in a regular expression literal (recommended)
  # http://eslint.org/docs/rules/no-regex-spaces
  no-regex-spaces:                    2
  # disallow sparse arrays (recommended)
  # http://eslint.org/docs/rules/no-sparse-arrays
  no-sparse-arrays:                   0
  # Avoid code that looks like two expressions but is actually one
  # http://eslint.org/docs/rules/no-unexpected-multiline
  no-unexpected-multiline:            2
  # disallow unreachable statements after a return, throw, continue, or break statement (recommended)
  # http://eslint.org/docs/rules/no-unreachable
  no-unreachable:                     2
  # disallow comparisons with the value NaN (recommended)
  # http://eslint.org/docs/rules/use-isnan
  use-isnan:                          2
  # Ensure JSDoc comments are valid
  # http://eslint.org/docs/rules/valid-jsdoc
  valid-jsdoc:
    - 2
    -
      prefer:
        returns:                      "return"
        exception:                    "throws"
        property:                     "prop"
        arg:                          "param"
        argument:                     "param"
        func:                         "function"
        fires:                        "emits"
        overview:                     "file"
        fileoverview:                 "file"
        host:                         "external"
        description:                  "desc"
        defaultvalue:                 "default"
        constant:                     "const"
        constructor: "class"
        augments:                     "extends"
        virtual:                      "abstract"
  # Ensure that the results of typeof are compared against a valid string (recommended)
  # http://eslint.org/docs/rules/valid-typeof
  valid-typeof:                       2
  # Best Practices
  # These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

  # Enforces getter/setter pairs in objects
  # http://eslint.org/docs/rules/accessor-pairs
  accessor-pairs:                     2
  # treat var statements as if they were block scoped
  # http://eslint.org/docs/rules/block-scoped-var
  block-scoped-var:                   2
  # specify the maximum cyclomatic complexity allowed in a program
  # http://eslint.org/docs/rules/complexity
  complexity:                         0
  # require return statements to either always or never specify values
  # http://eslint.org/docs/rules/consistent-return
  consistent-return:                  2
  # specify curly brace conventions for all control statements
  # http://eslint.org/docs/rules/curly
  curly:                              2
  # require default case in switch statements
  # http://eslint.org/docs/rules/default-case
  default-case:                       2
  # enforces consistent newlines before or after dots
  # http://eslint.org/docs/rules/dot-location
  dot-location:                       [2, "property"]
  # encourages use of dot notation whenever possible
  # http://eslint.org/docs/rules/dot-notation
  dot-notation:                       0 # [2, { "allowKeywords": true }]
  # require the use of === and !== (fixable)
  # http://eslint.org/docs/rules/eqeqeq
  eqeqeq:                             [2, "allow-null"]
  # make sure for-in loops have an if statement
  # http://eslint.org/docs/rules/guard-for-in
  guard-for-in:                       0
  # disallow the use of alert, confirm, and prompt
  # http://eslint.org/docs/rules/no-alert
  no-alert:                           2
  # disallow use of arguments.caller or arguments.callee
  # http://eslint.org/docs/rules/no-caller
  no-caller:                          2
  # disallow lexical declarations in case clauses
  # http://eslint.org/docs/rules/no-case-declarations
  no-case-declarations:               2
  # disallow division operators explicitly at beginning of regular expression
  # http://eslint.org/docs/rules/no-div-regex
  no-div-regex:                       2
  # disallow else after a return in an if
  # http://eslint.org/docs/rules/no-else-return
  no-else-return:                     2
  # disallow use of empty destructuring patterns
  # http://eslint.org/docs/rules/no-empty-pattern
  no-empty-pattern:                   2
  # disallow comparisons to null without a type-checking operator
  # http://eslint.org/docs/rules/no-eq-null
  no-eq-null:                         0
  # disallow use of eval()
  # http://eslint.org/docs/rules/no-eval
  no-eval:                            2
  # disallow adding to native types
  # http://eslint.org/docs/rules/no-extend-native
  no-extend-native:                   2
  # http://eslint.org/docs/rules/no-extra-bind
  # disallow unnecessary function binding
  no-extra-bind:                      2
  # disallow fallthrough of case statements (recommended)
  # http://eslint.org/docs/rules/no-fallthrough
  no-fallthrough:                     2
  # disallow the use of leading or trailing decimal points in numeric literals
  # http://eslint.org/docs/rules/no-floating-decimal
  no-floating-decimal:                2
  # disallow the type conversions with shorter notations
  # http://eslint.org/docs/rules/no-implicit-coercion
  no-implicit-coercion:               [2, { "boolean": false }]
  # disallow use of eval()-like methods
  # http://eslint.org/docs/rules/no-implied-eval
  no-implied-eval:                    2
  # disallow this keywords outside of classes or class-like objects
  # http://eslint.org/docs/rules/no-invalid-this
  no-invalid-this:                    0
  # disallow usage of __iterator__ property
  # http://eslint.org/docs/rules/no-iterator
  no-iterator:                        2
  # disallow use of labeled statements
  # http://eslint.org/docs/rules/no-labels
  no-labels:                          2
  # disallow unnecessary nested blocks
  # http://eslint.org/docs/rules/no-lone-blocks
  no-lone-blocks:                     2
  # disallow creation of functions within loops
  # http://eslint.org/docs/rules/no-loop-func
  no-loop-func:                       0
  # disallow the use of magic numbers
  # http://eslint.org/docs/rules/no-magic-numbers
  no-magic-numbers:                   0
  # disallow use of multiple spaces (fixable)
  # http://eslint.org/docs/rules/no-multi-spaces
  no-multi-spaces:
    - 2
    -
      exceptions:
        VariableDeclarator:           true
        ImportDeclaration:            true
  # disallow use of multiline strings
  # http://eslint.org/docs/rules/no-multi-str
  no-multi-str:                       2
  # disallow reassignments of native objects
  # http://eslint.org/docs/rules/no-native-reassign
  no-native-reassign:                 2
  # disallow use of new operator for Function object
  # http://eslint.org/docs/rules/no-new-func
  no-new-func:                        2
  # disallows creating new instances of String,Number, and Boolean
  # http://eslint.org/docs/rules/no-new-wrappers
  no-new-wrappers:                    2
  # disallow use of the new operator when not part of an assignment or comparison
  # http://eslint.org/docs/rules/no-new
  no-new:                             2
  # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  # http://eslint.org/docs/rules/no-octal-escape
  no-octal-escape:                    2
  # disallow use of octal literals (recommended)
  # http://eslint.org/docs/rules/no-octal
  no-octal:                           2
  # disallow reassignment of function parameters
  # http://eslint.org/docs/rules/no-param-reassign
  # NOTE: node v5 --harmony_default_parameters
  no-param-reassign:                  [2, { "props": false }]
  # disallow use of process.env
  # http://eslint.org/docs/rules/no-process-env
  no-process-env:                     0
  # disallow usage of __proto__ property
  # http://eslint.org/docs/rules/no-proto
  no-proto:                           2
  # disallow declaring the same variable more than once (recommended)
  # http://eslint.org/docs/rules/no-redeclare
  no-redeclare:                       [2, {"builtinGlobals": true}]
  # disallow use of assignment in return statement
  # http://eslint.org/docs/rules/no-return-assign
  no-return-assign:                   [2, "always"]
  # disallow use of "javascript:#" urls
  # http://eslint.org/docs/rules/no-script-url
  no-script-url:                      2
  # disallow comparisons where both sides are exactly the same
  # http://eslint.org/docs/rules/no-self-compare
  no-self-compare:                    2
  # disallow use of the comma operator
  # http://eslint.org/docs/rules/no-sequences
  no-sequences:                       2
  # restrict what can be thrown as an exception
  # http://eslint.org/docs/rules/no-throw-literal
  no-throw-literal:                   2
  # disallow usage of expressions in statement position
  # http://eslint.org/docs/rules/no-unused-expressions
  no-unused-expressions:              [2, { "allowShortCircuit": true }]
  # disallow unnecessary .call() and .apply()
  # http://eslint.org/docs/rules/no-useless-call
  no-useless-call:                    2
  # disallow unnecessary concatenation of literals or template literals
  # http://eslint.org/docs/rules/no-useless-concat
  no-useless-concat:                  2
  # disallow use of the void operator
  # http://eslint.org/docs/rules/no-void
  no-void:                            2
  # disallow usage of configurable warning terms in comments
  # http://eslint.org/docs/rules/no-warning-comments
  no-warning-comments:                0
  # http://eslint.org/docs/rules/no-with
  # disallow use of the with statement
  no-with:                            2
  # require use of the second argument for parseInt()
  # http://eslint.org/docs/rules/radix
  radix:                              2
  # require declaration of all vars at the top of their containing scope
  # http://eslint.org/docs/rules/vars-on-top
  vars-on-top:                        0
  # require immediate function invocation to be wrapped in parentheses
  # http://eslint.org/docs/rules/wrap-iife
  wrap-iife:                          [2, "inside"]
  # require or disallow Yoda conditions
  # http://eslint.org/docs/rules/yoda
  yoda:                               0
  # npm install eslint-plugin-react Mode
  # These rules relate to using strict mode.

  # controls location of Use Strict Directives
  # http://eslint.org/docs/rules/strict
  strict:                             [2, "never"]
  # Variables
  # These rules have to do with variable declarations.

  # enforce or disallow variable initializations at definition
  # http://eslint.org/docs/rules/init-declarations
  init-declarations:                  0
  # disallow the catch clause parameter name being the same as a variable in the outer scope
  # http://eslint.org/docs/rules/no-catch-shadow
  no-catch-shadow:                    2
  # disallow deletion of variables (recommended)
  # http://eslint.org/docs/rules/no-delete-var
  no-delete-var:                      2
  # disallow labels that share a name with a variable
  # http://eslint.org/docs/rules/no-label-var
  no-label-var:                       2
  # disallow shadowing of names such as arguments
  # http://eslint.org/docs/rules/no-shadow-restricted-names
  no-shadow-restricted-names:         2
  # disallow declaration of variables already declared in the outer scope
  # http://eslint.org/docs/rules/no-shadow
  no-shadow:                          0
  # disallow use of undefined when initializing variables
  # http://eslint.org/docs/rules/no-undef-init
  no-undef-init:                      2
  # disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
  # http://eslint.org/docs/rules/no-undef
  no-undef:                           2
  # disallow use of undefined variable
  # http://eslint.org/docs/rules/no-undefined
  no-undefined:                       2
  # disallow declaration of variables that are not used in the code (recommended)
  # http://eslint.org/docs/rules/no-unused-vars
  no-unused-vars:                     [2, { "vars": "all", "args": "after-used" }]
  # disallow use of variables before they are defined
  # http://eslint.org/docs/rules/no-use-before-define
  no-use-before-define:               [2, "nofunc"]
  # Node.js and CommonJS
  # These rules are specific to JavaScript running on Node.js or using CommonJS in the browser.

  # enforce return after a callback
  # http://eslint.org/docs/rules/callback-return
  callback-return:                    0
  # enforce require() on top-level module scope
  # http://eslint.org/docs/rules/global-require
  global-require:                     0
  # http://eslint.org/docs/rules/handle-callback-err
  # enforce error handling in callbacks
  handle-callback-err:                2
  # disallow mixing regular variable and require declarations
  # http://eslint.org/docs/rules/no-mixed-requires
  no-mixed-requires:                  2
  # disallow use of new operator with the require function
  # http://eslint.org/docs/rules/no-new-require
  no-new-require:                     2
  # disallow string concatenation with __dirname and __filename
  # http://eslint.org/docs/rules/no-path-concat
  no-path-concat:                     2
  # disallow process.exit()
  # http://eslint.org/docs/rules/no-process-exit
  no-process-exit:                    0
  # restrict usage of specified node modules
  # http://eslint.org/docs/rules/no-restricted-modules
  no-restricted-modules:              0
  # disallow use of synchronous methods
  # http://eslint.org/docs/rules/no-sync
  no-sync:                            0
  # Stylistic Issues
  # These rules are purely matters of style and are quite subjective.

  # enforce spacing inside array brackets (fixable)
  # http://eslint.org/docs/rules/array-bracket-spacing
  array-bracket-spacing:              [2, "never"]
  # disallow or enforce spaces inside of single line blocks (fixable)
  # http://eslint.org/docs/rules/block-spacing
  block-spacing:                      [2, "always"]
  # enforce one true brace style
  # http://eslint.org/docs/rules/brace-style
  brace-style:                        [2, "1tbs"]
  # require camel case names
  # http://eslint.org/docs/rules/camelcase
  camelcase:                          [2, { "properties": "never" }]
  # enforce spacing before and after comma (fixable)
  # http://eslint.org/docs/rules/comma-spacing
  comma-spacing:                      [2, { "before": false, "after": true }]
  # enforce one true comma style
  # http://eslint.org/docs/rules/comma-style
  comma-style:                        [2, "last"]
  # require or disallow padding inside computed properties (fixable)
  # http://eslint.org/docs/rules/computed-property-spacing
  computed-property-spacing:          [2, "never"]
  # enforce consistent naming when capturing the current execution context
  # http://eslint.org/docs/rules/consistent-this
  consistent-this:                    [2, "self"]
  # enforce newline at the end of file, with no multiple empty lines (fixable)
  # http://eslint.org/docs/rules/eol-last
  eol-last:                           2
  # require function expressions to have a name
  # http://eslint.org/docs/rules/func-names
  func-names:                         0
  # enforce use of function declarations or expressions
  # http://eslint.org/docs/rules/func-style
  func-style:                         0
  # this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
  # http://eslint.org/docs/rules/id-length
  id-length:                          0
  # require identifiers to match the provided regular expression
  # http://eslint.org/docs/rules/id-match
  id-match:                           0
  # specify tab or space width for your code (fixable)
  # http://eslint.org/docs/rules/indent
  indent:                             [2, 2, { "SwitchCase": 1 }]
  # specify whether double or single quotes should be used in JSX attributes
  # http://eslint.org/docs/rules/jsx-quotes
  jsx-quotes:                         [2, "prefer-double"]
  # enforce spacing between keys and values in object literal properties
  # http://eslint.org/docs/rules/key-spacing
  key-spacing:                        0 # [2, { "beforeColon: false, "afterColon: true, "align: "value" }]
  # disallow mixed 'LF' and 'CRLF' as linebreaks
  # http://eslint.org/docs/rules/linebreak-style
  linebreak-style:                    [2, "unix"]
  # enforce empty lines around comments
  lines-around-comment:               [0, { "beforeBlockComment": true, "allowBlockStart": true, "allowBlockEnd": true, "allowObjectStart": true, "allowObjectEnd": true, "allowArrayStart": true, "allowArrayEnd": true }]
  # specify the maximum depth that blocks can be nested
  # http://eslint.org/docs/rules/max-depth
  max-depth:                          [2, 4]
  # specify the maximum length of a line in your program
  # http://eslint.org/docs/rules/max-len
  max-len:                            0 # [2, 80, 4, { "ignoreComments: true, "ignoreUrls: true }]
  # specify the maximum depth callbacks can be nested
  # http://eslint.org/docs/rules/max-nested-callbacks
  max-nested-callbacks:               [2, 4]
  # limits the number of parameters that can be used in the function declaration.
  # http://eslint.org/docs/rules/max-params
  max-params:                         0
  # specify the maximum number of statement allowed in a function
  # http://eslint.org/docs/rules/max-statements
  max-statements:                     0
  # require a capital letter for constructors
  # http://eslint.org/docs/rules/new-cap
  new-cap:                            [2, { "newIsCap": true, "capIsNew": false }]
  # "babel/new-cap:               2
  # disallow the omission of parentheses when invoking a constructor with no arguments
  # http://eslint.org/docs/rules/new-parens
  new-parens:                         2
  # require or disallow an empty newline after variable declarations
  # http://eslint.org/docs/rules/newline-after-var
  newline-after-var:                  0
  # disallow use of the Array constructor
  # http://eslint.org/docs/rules/no-array-constructor
  no-array-constructor:               2
  # disallow use of bitwise operators
  # http://eslint.org/docs/rules/no-bitwise
  no-bitwise:                         2
  # disallow use of the continue statement
  # http://eslint.org/docs/rules/no-continue
  no-continue:                        0
  # disallow comments inline after code
  # http://eslint.org/docs/rules/no-inline-comments
  no-inline-comments:                 0
  # disallow if as the only statement in an else block
  # http://eslint.org/docs/rules/no-lonely-if
  no-lonely-if:                       2
  # disallow mixed spaces and tabs for indentation (recommended)
  # http://eslint.org/docs/rules/no-mixed-spaces-and-tabs
  no-mixed-spaces-and-tabs:           2
  # disallow multiple empty lines
  # http://eslint.org/docs/rules/no-multiple-empty-lines
  no-multiple-empty-lines:            [2, { "max": 1 }]
  # disallow negated conditions
  # http://eslint.org/docs/rules/no-negated-condition
  no-negated-condition:               0
  # disallow nested ternary expressions
  # http://eslint.org/docs/rules/no-nested-ternary
  no-nested-ternary:                  2
  # disallow the use of the Object constructor
  # http://eslint.org/docs/rules/no-new-object
  no-new-object:                      2
  # disallow use of unary operators, ++ and --
  # http://eslint.org/docs/rules/no-plusplus
  no-plusplus:                        0
  # disallow use of certain syntax in code
  # http://eslint.org/docs/rules/no-restricted-syntax
  no-restricted-syntax:               0
  # disallow space between function identifier and application (fixable)
  # http://eslint.org/docs/rules/no-spaced-func
  no-spaced-func:                     2
  # disallow the use of ternary operators
  # http://eslint.org/docs/rules/no-ternary
  no-ternary:                         0
  # disallow trailing whitespace at the end of lines (fixable)
  # http://eslint.org/docs/rules/no-trailing-spaces
  no-trailing-spaces:                 2
  # disallow dangling underscores in identifiers
  # http://eslint.org/docs/rules/no-underscore-dangle
  no-underscore-dangle:               0
  # disallow the use of ternary operators when a simpler alternative exists
  # http://eslint.org/docs/rules/no-unneeded-ternary
  no-unneeded-ternary:                2
  # require or disallow padding inside curly braces (fixable)
  # http://eslint.org/docs/rules/object-curly-spacing
  object-curly-spacing:               [2, "always"]
  # "babel/object-curly-spacing:  [2, "always"]
  # require or disallow one variable declaration per function
  # http://eslint.org/docs/rules/one-var
  one-var:                            [2, { "uninitialized": "always", "initialized": "never" }]
  # require assignment operator shorthand where possible or prohibit it entirely
  # http://eslint.org/docs/rules/operator-assignment
  operator-assignment:                [2, "always"]
  # enforce operators to be placed before or after line breaks
  # http://eslint.org/docs/rules/operator-linebreak
  operator-linebreak:                 [2, "before"]
  # enforce padding within blocks
  # http://eslint.org/docs/rules/padded-blocks
  padded-blocks:                      [0, "never"]
  # require quotes around object literal property names
  # http://eslint.org/docs/rules/quote-props
  quote-props:                        [2, "as-needed", { "keywords": true, "numbers": true, "unnecessary": true }]
  # specify whether backticks, double or single quotes should be used (fixable)
  # http://eslint.org/docs/rules/quotes
  quotes:                             [2, "single", "avoid-escape"]
  # Require JSDoc comment
  # http://eslint.org/docs/rules/require-jsdoc
  require-jsdoc:                      0
  # enforce spacing before and after semicolons
  # http://eslint.org/docs/rules/semi-spacing
  semi-spacing:                       2
  # require or disallow use of semicolons instead of ASI (fixable)
  # http://eslint.org/docs/rules/semi
  semi:                               [2, "always"]
  # sort variables within the same declaration block
  # http://eslint.org/docs/rules/sort-vars
  sort-vars:                          0
  # require or disallow a space before blocks (fixable)
  # http://eslint.org/docs/rules/space-before-blocks
  space-before-blocks:                [2, "always"]
  # require or disallow a space before function opening parenthesis (fixable)
  # http://eslint.org/docs/rules/space-before-function-paren
  space-before-function-paren:        [2, { "anonymous": "always", "named": "never" }]
  # require or disallow spaces inside parentheses
  # http://eslint.org/docs/rules/space-in-parens
  space-in-parens:                    [2, "never"]
  # require spaces around operators (fixable)
  # http://eslint.org/docs/rules/space-infix-ops
  space-infix-ops:                    2
  # require or disallow spaces before/after unary operators (fixable)
  # http://eslint.org/docs/rules/space-unary-ops
  space-unary-ops:                    [2, { "words": true, "nonwords": false }]
  # http://eslint.org/docs/rules/spaced-comment
  # require or disallow a space immediately following the # or /* in a comment
  # http://jscs.info/rule/requireSpaceAfterLineComment
  spaced-comment:
    - 2
    - always
    -
      line:
        markers: []
        exceptions:                     ["-", "+", "-+", "=", "*", "/"]
      block:
        markers: []
        exceptions:                     ["-", "+", "-+", "=", "*", "!", "/"]
  # require regex literals to be wrapped in parentheses
  # http://eslint.org/docs/rules/wrap-regex
  wrap-regex:                         0
  # ECMAScript 6
  # These rules are only relevant to ES6 environments.

  # require braces in arrow function body
  # http://eslint.org/docs/rules/arrow-body-style
  arrow-body-style:                   0 # [2, "as-needed"]
  # require parens in arrow function arguments
  # http://eslint.org/docs/rules/arrow-parens
  arrow-parens:                       0
  # "babel/arrow-parens:          0
  # require space before/after arrow function's arrow (fixable)
  # http://eslint.org/docs/rules/arrow-spacing
  arrow-spacing:                      [2, { "before": true, "after": true }]
  # verify calls of super() in constructors
  # http://eslint.org/docs/rules/constructor-super
  constructor-super:                  2
  # enforce spacing around the * in generator functions (fixable)
  # http://eslint.org/docs/rules/generator-star-spacing
  generator-star-spacing:             [2, { "before": false, "after": true }]
  # "babel/generator-star-spacing: [2, { "before: false, "after: true }]
  # disallow modifying variables of class declarations
  # http://eslint.org/docs/rules/no-class-assign
  no-class-assign:                    2
  # disallow modifying variables that are declared using const
  # http://eslint.org/docs/rules/no-const-assign
  no-const-assign:                    2
  # disallow duplicate name in class members
  # http://eslint.org/docs/rules/no-dupe-class-members
  no-dupe-class-members:              2
  # disallow use of this/super before calling super() in constructors.
  # http://eslint.org/docs/rules/no-this-before-super
  no-this-before-super:               2
  # require let or const instead of var
  # http://eslint.org/docs/rules/no-var
  no-var:                             2
  # require method and property shorthand syntax for object literals
  # http://eslint.org/docs/rules/object-shorthand
  object-shorthand:                   2
  # "babel/object-shorthand:      2
  # suggest using arrow functions as callbacks
  # http://eslint.org/docs/rules/prefer-arrow-callback
  prefer-arrow-callback:              0
  # suggest using const declaration for variables that are never modified after declared
  # http://eslint.org/docs/rules/prefer-const
  # NOTE:
  # function getQuote()
  #   let quote = 0;
  #   setTimeout(() =>
  #     quote = document.body;
  #   }, 1000);
  # }
  prefer-const:                       2
  # suggest using Reflect methods where applicable
  # http://eslint.org/docs/rules/prefer-reflect
  prefer-reflect:                     0
  # suggest using the spread operator instead of .apply().
  # http://eslint.org/docs/rules/prefer-spread
  prefer-spread:                      2
  # suggest using template literals instead of strings concatenation
  # http://eslint.org/docs/rules/prefer-template
  prefer-template:                    2
  # disallow generator functions that do not have yield
  # http://eslint.org/docs/rules/require-yield
  require-yield:                      2
  # guard against awaiting async functions inside of a loop
  # https://www.npmjs.com/package/eslint-plugin-babel
  # "babel/no-await-in-loop:      2

  # Prevent missing displayName in a React component definition
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md
  react/display-name:                 [2, { "ignoreTranspilerName": false }]
  # Forbid certain propTypes
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md
  react/forbid-prop-types:            [2, { "forbid": ["any", "array", "object"] }]
  # Prevent usage of dangerous JSX properties
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-danger.md
  react/no-danger:                    0
  # Prevent usage of deprecated methods
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md
  react/no-deprecated:                2
  # Prevent usage of setState in componentDidMount
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md
  react/no-did-mount-set-state:       2
  # Prevent usage of setState in componentDidUpdate
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-did-update-set-state.md
  react/no-did-update-set-state:      2
  # Prevent direct mutation of this.state
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-direct-mutation-state.md
  react/no-direct-mutation-state:     2
  # Prevent usage of findDOMNode
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md
  react/no-find-dom-node:             2
  # Prevent usage of isMounted
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md
  react/no-is-mounted:                2
  # Prevent multiple component definition per file
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
  react/no-multi-comp:                [2, { "ignoreStateless": true }]
  # Prevent usage of the return value of React.render
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md
  react/no-render-return-value:       2
  #  Prevent usage of setState
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-set-state.md
  react/no-set-state:                 0
  # Prevent using string references in ref attribute.
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md
  react/no-string-refs:               2
  # Prevent usage of unknown DOM property (fixable)
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
  react/no-unknown-property:          2
  # Enforce ES5 or ES6 class for React Components
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md
  react/prefer-es6-class:             [2, "always"]
  # Enforce stateless React Components to be written as a pure function
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md
  react/prefer-stateless-function:    0
  # Prevent missing props validation in a React component definition
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md
  # TODO
  react/prop-types:                   0
  # Prevent missing React when using JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md
  react/react-in-jsx-scope:           2
  # Enforce React components to have a shouldComponentUpdate method
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-optimization.md
  react/require-optimization:         [0, { "allowDecorators": ["pureRender", "pureRender()"] }]
  # Enforce ES5 or ES6 class for returning value in render function
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md
  react/require-render-return:        2
  # Prevent extra closing tags for components without children
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md
  react/self-closing-comp:            [2, { "component": true, "html": false }]
  # Enforce component methods order
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md
  react/sort-comp:                    2
  # Enforce propTypes declarations alphabetical sorting
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md
  react/sort-prop-types:              0


  # Enforce boolean attributes notation in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md
  react/jsx-boolean-value:            [2, "never"]
  # Validate closing bracket location in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
  react/jsx-closing-bracket-location: [2, "after-props"]
  # Enforce or disallow spaces inside of curly braces in JSX attributes
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md
  react/jsx-curly-spacing:            [2, "never"]
  # Enforce or disallow spaces around equal signs in JSX attributes (fixable)
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md
  react/jsx-equals-spacing:           [2, "never"]
  # Restrict file extensions that may contain JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
  react/jsx-filename-extension:       2
  # Enforce position of the first prop in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md
  react/jsx-first-prop-new-line:      0
  # Enforce event handler naming conventions in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md
  react/jsx-handler-names:            0
  # Validate props indentation in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md
  react/jsx-indent-props:             [2, 2]
  # Validate JSX indentation
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md
  react/jsx-indent:                   [2, 2]
  # Validate JSX has key prop when in array or iterator
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-key.md
  react/jsx-key:                      2
  # Limit maximum of props on a single line in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md
  react/jsx-max-props-per-line:       0
  # No .bind() or Arrow Functions in JSX Props
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md
  react/jsx-no-bind:                  0 # [2, { "ignoreRefs: true }]
  # Prevent comments from being inserted as text nodes
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md
  react/jsx-no-comment-textnodes:     2
  # Prevent duplicate properties in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md
  react/jsx-no-duplicate-props:       2
  # Prevent usage of unwrapped JSX strings
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md
  react/jsx-no-literals:              0
  # Prevent usage of unsafe target='_blank'
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md
  # TODO
  react/jsx-no-target-blank:          0
  # Disallow undeclared variables in JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md
  react/jsx-no-undef:                 2
  # Enforce PasalCase for user-defined JSX components
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
  react/jsx-pascal-case:              2
  # Enforce props alphabetical sorting
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md
  react/jsx-sort-props:               0
  # Validate spacing before closing bracket in JSX (fixable)
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md
  react/jsx-space-before-closing:     [2, "always"]
  # Prevent React to be incorrectly marked as unused
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md
  react/jsx-uses-react:               2
  # Prevent variables used in JSX to be incorrectly marked as unused
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md
  react/jsx-uses-vars:                2
  # Prevent missing parentheses around multiline JSX
  # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md
  react/jsx-wrap-multilines:          2

  # https://github.com/zertosh/eslint-plugin-flow-vars
  flow-vars/define-flow-type:         2
  flow-vars/use-flow-type:            2

settings:
  react:
    pragma: "React"
